mutate(longitude = st_coordinates(geometry)[, 1],
latitude = st_coordinates(geometry)[, 2])
st_crs(faglie) <- 4326  # Imposta il CRS di 'faglie'
faglie <- st_read("gem_active_faults.shp")
ggplot() +
# Aggiungi la mappa del mondo
borders("world", colour = "gray50", fill = "lightgray") +
# Aggiungi le faglie
geom_sf(data = faglie, color = "red", size = 1, alpha = 0.7) +
labs(title = "Faglie Geologiche Attive", x = "Longitudine", y = "Latitudine",
color = "Magnitudo") +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
legend.position="right")
world <- ne_countries(scale = "medium", returnclass = "sf")
asia <- world %>% filter(continent == "Asia")
# Converte i dati dei punti in un oggetto sf
merged_data_sf <- st_as_sf(merged_data_clean, coords = c("longitude", "latitude"), crs = st_crs(asia))
# Filtro i punti che sono dentro il continente africano
merged_data_filtered <- st_intersection(merged_data_sf, asia)
# Estraggog le coordinate dalla geometria
merged_data_filtered <- merged_data_filtered %>%
mutate(longitude = st_coordinates(geometry)[, 1],
latitude = st_coordinates(geometry)[, 2])
st_crs(faglie) <- 4326  # Imposta il CRS di 'faglie'
st_crs(asia) <- 4326    # Imposta il CRS di 'asia'
faglie_in_asia <- st_intersection(faglie, asia)
asia_merged <- st_join(asia, merged_data_sf %>% select(state, Percentuale))
ggplot(data = asia_merged) +
geom_sf(aes(fill = Percentuale), color = "gray") +
scale_fill_gradient(low = "yellow", high = "red", na.value = "gray90",
name = "Percentuale") +
geom_point(data = merged_data_filtered, aes(x = longitude,
y = latitude), alpha = 0.6) +
geom_sf(data = faglie_in_asia, color = "violet", size = 1, alpha = 0.3) +
geom_text_repel(data = merged_data_filtered,
aes(x = longitude, y = latitude, label = str_to_title(state)),
size = 2.5, fontface = "bold") +
labs(title = "Asia e faglie geologiche", x = "Longitudine",
y = "Latitudine", fill = "Percentuale",
caption = 'In grigio sono indicati gli stati su cui non abbiamo dati.') +
guides(fill = guide_colorbar(title = "Percentuale",
title.position = "top",
barwidth = 0.8, barheight = 15)) +
theme_minimal(base_size = 16) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
legend.position = "right",
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 12),
)
>>>>>>> 2d693ee9401df40dff724fc000f75c637a9584db
faglie <- st_read("gem_active_faults.shp")
library(readr)
library(sf)
library(ggplot2)
library(dplyr)
library(maps)
library(tidyr)
library(RColorBrewer)
library(stringr)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggrepel)
library(lubridate)
library(gridExtra)
library(tidyr)
library(corrplot)
library(ggcorrplot)
library(GGally)
faglie <- st_read("gem_active_faults.shp")
ggplot() +
# Aggiungi la mappa del mondo
borders("world", colour = "gray50", fill = "lightgray") +
# Aggiungi le faglie
geom_sf(data = faglie, color = "red", size = 1, alpha = 0.7) +
labs(title = "Faglie Geologiche Attive", x = "Longitudine", y = "Latitudine",
color = "Magnitudo") +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
legend.position="right")
hist = ggplot(terremoti, aes(x=mag)) +
geom_histogram(fill="lightblue", color="white", bins=40) +
theme_minimal() +
labs(title="ISTOGRAMMA di magnitudo",
subtitle="Numero di bins = 40",
x="Magnitudo",
y="Frequenza")
kernel =  ggplot(terremoti, aes(x=mag)) +
geom_density(fill="lightblue", bw=bw.nrd0(terremoti$mag)) +
theme_minimal() +
labs(title="DENSITÀ DI KERNEL di magnitudo",
subtitle="Stimata con parametro di smoothing ottimale",
x="Magnitudo",
y="Densità")
grid.arrange(hist, kernel, nrow=1)
bw.nrd0
bw.nrd0(terremoti$mag)
hist = ggplot(terremoti, aes(x=mag)) +
geom_histogram(fill="lightblue", color="white", bins=40) +
theme_minimal() +
labs(title="ISTOGRAMMA di magnitudo",
subtitle="Numero di bins = 40",
x="Magnitudo",
y="Frequenza")
kernel =  ggplot(terremoti, aes(x=mag)) +
geom_density(fill="lightblue", bw=0.5 +
theme_minimal() +
labs(title="DENSITÀ DI KERNEL di magnitudo",
subtitle="Stimata con parametro di smoothing ottimale",
x="Magnitudo",
y="Densità")
grid.arrange(hist, kernel, nrow=1)
hist = ggplot(terremoti, aes(x=mag)) +
geom_histogram(fill="lightblue", color="white", bins=40) +
theme_minimal() +
labs(title="ISTOGRAMMA di magnitudo",
subtitle="Numero di bins = 40",
x="Magnitudo",
y="Frequenza")
kernel =  ggplot(terremoti, aes(x=mag)) +
geom_density(fill="lightblue", bw=0.5) +
theme_minimal() +
labs(title="DENSITÀ DI KERNEL di magnitudo",
subtitle="Stimata con parametro di smoothing ottimale",
x="Magnitudo",
y="Densità")
grid.arrange(hist, kernel, nrow=1)
hist = ggplot(terremoti, aes(x=mag)) +
geom_histogram(fill="lightblue", color="white", bins=40) +
theme_minimal() +
labs(title="ISTOGRAMMA di magnitudo",
subtitle="Numero di bins = 40",
x="Magnitudo",
y="Frequenza")
kernel =  ggplot(terremoti, aes(x=mag)) +
geom_density(fill="lightblue", bw=0.1) +
theme_minimal() +
labs(title="DENSITÀ DI KERNEL di magnitudo",
subtitle="Stimata con parametro di smoothing ottimale",
x="Magnitudo",
y="Densità")
grid.arrange(hist, kernel, nrow=1)
hist = ggplot(terremoti, aes(x=mag)) +
geom_histogram(fill="lightblue", color="white", bins=40) +
theme_minimal() +
labs(title="ISTOGRAMMA di magnitudo",
subtitle="Numero di bins = 40",
x="Magnitudo",
y="Frequenza")
kernel =  ggplot(terremoti, aes(x=mag)) +
geom_density(fill="lightblue", bw=bw.nrd(terremoti$mag)) +
theme_minimal() +
labs(title="DENSITÀ DI KERNEL di magnitudo",
subtitle="Stimata con parametro di smoothing ottimale",
x="Magnitudo",
y="Densità")
grid.arrange(hist, kernel, nrow=1)
hist = ggplot(terremoti, aes(x=mag)) +
geom_histogram(fill="lightblue", color="white", bins=40) +
theme_minimal() +
labs(title="ISTOGRAMMA di magnitudo",
subtitle="Numero di bins = 40",
x="Magnitudo",
y="Frequenza")
kernel =  ggplot(terremoti, aes(x=mag)) +
geom_density(fill="lightblue", bw=0.05) +
theme_minimal() +
labs(title="DENSITÀ DI KERNEL di magnitudo",
subtitle="Stimata con parametro di smoothing ottimale",
x="Magnitudo",
y="Densità")
grid.arrange(hist, kernel, nrow=1)
hist = ggplot(terremoti, aes(x=mag)) +
geom_histogram(fill="lightblue", color="white", bins=40) +
theme_minimal() +
labs(title="ISTOGRAMMA di magnitudo",
subtitle="Numero di bins = 40",
x="Magnitudo",
y="Frequenza")
kernel =  ggplot(terremoti, aes(x=mag)) +
geom_density(fill="lightblue", bw=0.04) +
theme_minimal() +
labs(title="DENSITÀ DI KERNEL di magnitudo",
subtitle="Stimata con parametro di smoothing ottimale",
x="Magnitudo",
y="Densità")
grid.arrange(hist, kernel, nrow=1)
hist = ggplot(terremoti, aes(x=mag)) +
geom_histogram(fill="lightblue", color="white", bins=40) +
theme_minimal() +
labs(title="ISTOGRAMMA di magnitudo",
subtitle="Numero di bins = 40",
x="Magnitudo",
y="Frequenza")
kernel =  ggplot(terremoti, aes(x=mag)) +
geom_density(fill="lightblue", bw=0.05) +
theme_minimal() +
labs(title="DENSITÀ DI KERNEL di magnitudo",
subtitle="Stimata con parametro di smoothing ottimale",
x="Magnitudo",
y="Densità")
grid.arrange(hist, kernel, nrow=1)
# Filtra i dati e crea le fasce di magnitudo
DS3_filtered <- terremoti %>%
filter(depth > 0) %>%  # Rimuove profondità negative o zero
mutate(mag_group = cut(mag, breaks = seq(5, 9, by = 0.5), include.lowest = TRUE)) %>%
filter(!is.na(mag_group)) %>%  # Rimuove fasce di magnitudo senza dati
group_by(mag_group) %>%
filter(n() >= 10) %>%  # Mantiene solo gruppi con almeno 10 osservazioni
ungroup()
# Creiamo il violin plot
custom_colors <- c("#1F77B4", "#FF7F0E", "#2CA02C", "#D62728", "#9467BD", "#8C564B", "#E377C2", "#7F7F7F")
ggplot(DS3_filtered, aes(x = mag_group, y = depth, fill = mag_group)) +
geom_violin(scale = "width", alpha = 0.7, color = "black") +  # Bordo nero
scale_fill_manual(values = custom_colors) +  # Usa la palette personalizzata
labs(title = "Distribuzione della profondità per fasce di magnitudo",
x = "Fasce di Magnitudo",
y = "Profondità (km)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
DS3_filtered <-terremoti %>%
filter(depth < 300) %>%  # Escludiamo solo outlier estremi
mutate(mag_group = cut(mag, breaks = seq(5, 9, by = 0.5), include.lowest = TRUE))
# Rimuovi le fasce di magnitudo che non contengono dati
DS3_filtered <- DS3_filtered %>%
filter(!is.na(mag_group))
# Crea il grafico
library(ggsci)
ggplot(DS3_filtered, aes(x = mag_group, y = depth, fill = mag_group)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16) +
scale_fill_jco() +  # Usa la palette "jco"
labs(title = "Distribuzione della profondità per fasce di magnitudo",
x = "Fasce di Magnitudo",
y = "Profondità (km)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
# Filtra i dati e crea le fasce di magnitudo
DS3_filtered <- terremoti %>%
filter(depth > 0) %>%  # Rimuove profondità negative o zero
mutate(mag_group = cut(mag, breaks = seq(5, 9, by = 0.5), include.lowest = TRUE)) %>%
filter(!is.na(mag_group)) %>%  # Rimuove fasce di magnitudo senza dati
group_by(mag_group) %>%
filter(n() >= 10) %>%  # Mantiene solo gruppi con almeno 10 osservazioni
ungroup()
# Creiamo il violin plot
custom_colors <- c("#1F77B4", "#FF7F0E", "#2CA02C", "#D62728", "#9467BD", "#8C564B", "#E377C2", "#7F7F7F")
ggplot(DS3_filtered, aes(x = mag_group, y = depth, fill = mag_group)) +
geom_violin(scale = "width", alpha = 0.7, color = "black") +  # Bordo nero
scale_fill_manual(values = custom_colors) +  # Usa la palette personalizzata
labs(title = "Distribuzione della profondità per fasce di magnitudo",
x = "Fasce di Magnitudo",
y = "Profondità (km)",
fill="Mag.Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
DS3_filtered <-terremoti %>%
filter(depth < 300) %>%  # Escludiamo solo outlier estremi
mutate(mag_group = cut(mag, breaks = seq(5, 9, by = 0.5), include.lowest = TRUE))
# Rimuovi le fasce di magnitudo che non contengono dati
DS3_filtered <- DS3_filtered %>%
filter(!is.na(mag_group))
# Crea il grafico
library(ggsci)
ggplot(DS3_filtered, aes(x = mag_group, y = depth, fill = mag_group)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16) +
scale_fill_jco() +  # Usa la palette "jco"
labs(title = "Distribuzione della profondità per fasce di magnitudo",
x = "Fasce di Magnitudo",
y = "Profondità (km)",
fill="Mag.Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
##seleziono le variabili per l'analisi
df_corr= terremoti%>%
dplyr::select(depth, mag, nst, gap, dmin, rms)
#### seleziono le variabili da pulire da NA
df_corr_clean <- df_corr %>%
drop_na(depth, mag, nst, gap, dmin, rms)
my_density <- function(data, mapping, ...){
ggplot(data = data, mapping = mapping) +
geom_density(alpha = 0.5,
fill = "cornflowerblue", ...)
}
my_scatter <- function(data, mapping, ...){
ggplot(data = data, mapping = mapping) +
geom_point(alpha = 0.5,
color = "cornflowerblue") +
geom_smooth(method=lm,
se=FALSE, ...)
}
ggpairs(df_corr_clean,
lower=list(continuous = my_scatter),
diag = list(continuous = my_density)) +
labs(title = "") +
theme_bw()
ggplot(terremoti, aes(x = dmin, y = horizontalError)) +
geom_point(color = "lightblue", alpha = 0.8, size = 2) +
geom_smooth(method = "lm", se = FALSE, aes(color = "Modello Lineare")) +
geom_smooth(se = FALSE, aes(color = "Modello GAM")) +
scale_color_manual(
name = "Modelli",
values = c("Modello Lineare" = "cornflowerblue", "Modello GAM" = "red")
) +
scale_y_continuous(limits = c(0, 20)) +
scale_x_continuous(breaks = seq(0, 23, 5), limits = c(0, 23)) +
theme_minimal() +
labs(
title = "Distanza dalla stazione più vicina vs Errore sul rilevamento della posizione",
subtitle = "Modello Lineare vs Modello GAM",
x = "Distanza dalla stazione",
y = "Errore posizione"
) +
theme(legend.position = "right")
##seleziono le variabili per l'analisi
df_corr= terremoti%>%
dplyr::select(depth, mag, nst, gap, dmin, rms, horizontalError, depthError,
magError, magNst)
#### seleziono le variabili da pulire da NA
df_corr_clean <- df_corr %>%
drop_na(depth, mag, nst, gap, dmin, rms, horizontalError,
depthError, magError, magNst)
#calcolo la matrice di correlazione
df_f=cor(df_corr_clean)
ggcorrplot(df_f,
hc.order = TRUE,
type = "lower",
lab = TRUE)
gg=   terremoti %>%
mutate(Anno=year(as.Date(time)))%>%
group_by(Anno) %>%
summarise(Conteggio= n(), magnitudomedia=mean(mag))
ggplot(gg, aes(x = Anno, y = Conteggio)) +
geom_line(color = "blue") +
labs(title = "Serie Temporale dei Terremoti (Raggruppati per Anno)", x = "Anno", y = "Numero di Terremoti")
gg=   terremoti %>%
mutate(Anno=year(as.Date(time)))%>%
group_by(Anno) %>%
summarise(Conteggio= n(), magnitudomedia=mean(mag))
ggplot(gg, aes(x = Anno, y = Conteggio)) +
geom_line(color = "blue") +
theme_minimal()+
labs(title = "Serie Temporale dei Terremoti (Raggruppati per Anno)", x = "Anno", y = "Numero di Terremoti")
df_filtered <- terremoti %>%
filter(!type %in% c("rock burst", "mine collapse")) %>%
mutate(time = ymd_hms(time, tz = "UTC"),
year = year(time)) %>%
mutate(year_group = cut(year,
breaks = seq(min(year), max(year) + 5, by = 5),
include.lowest = TRUE,
right = FALSE)) %>%
group_by(type, year_group) %>%
summarise(count = n(), .groups = "drop")
ggplot(df_filtered, aes(x = year_group, fill = type, weight = count)) +
geom_bar(position = "fill") +
scale_y_continuous(trans = "log") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
labs(y = 'log(#)', x = "Anni", title = "Grafico in scala logaritmica dei vari terremoti")
# Carica le librerie necessarie
df_year <- terremoti %>%
mutate(time = ymd_hms(time, tz = "UTC"),
year = floor_date(time, unit = "year"),
mag_bin = cut(mag,
breaks = seq(floor(min(mag, na.rm = TRUE)),
ceiling(max(mag, na.rm = TRUE)),
by = 0.5),
include.lowest = TRUE,
right = FALSE)) %>%
group_by(year, mag_bin) %>%
summarise(count = n(), .groups = "drop")
# Creazione del grafico ad area
ggplot(df_year, aes(x = year, y = count, fill = mag_bin)) +
geom_area(color = "black", size = 0.2) +
scale_y_log10() +
labs(title = "Terremoti per Intervallo di Magnitudo nel Tempo",
subtitle = "Aggregazione annuale con step di 0.5 nella magnitudo",
x = "Anno",
y = "Numero di Terremoti (scala log.)",
fill = "Magnitudo (intervallo)") +
theme_minimal()
# Carica le librerie necessarie
df_year <- terremoti %>%
mutate(time = ymd_hms(time, tz = "UTC"),
year = floor_date(time, unit = "year"),
mag_bin = cut(mag,
breaks = seq(floor(min(mag, na.rm = TRUE)),
ceiling(max(mag, na.rm = TRUE)),
by = 0.5),
include.lowest = TRUE,
right = FALSE)) %>%
group_by(year, mag_bin) %>%
summarise(count = n(), .groups = "drop")
# Creazione del grafico ad area
ggplot(df_year, aes(x = year, y = count, fill = mag_bin)) +
geom_area(color = "black", size = 0.2) +
scale_y_log10() +
labs(title = "Terremoti per Intervallo di Magnitudo nel Tempo",
subtitle = "Aggregazione annuale con step di 0.5 nella magnitudo",
x = "Anno",
y = "Numero di Terremoti (scala log.)",
fill = "Magnitudo (intervallo)") +
theme_minimal()
df_filtered <- terremoti %>%
filter(!type %in% c("rock burst", "mine collapse")) %>%
mutate(time = ymd_hms(time, tz = "UTC"),
year = year(time)) %>%
mutate(year_group = cut(year,
breaks = seq(min(year), max(year) + 5, by = 5),
include.lowest = TRUE,
right = FALSE)) %>%
group_by(type, year_group) %>%
summarise(count = n(), .groups = "drop")
ggplot(df_filtered, aes(x = year_group, fill = type, weight = count)) +
geom_bar(position = "fill") +
scale_y_continuous(trans = "log") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
labs(y = 'log(#)', x = "Anni", title = "Grafico in scala logaritmica dei vari terremoti")
world <- ne_countries(scale = "medium", returnclass = "sf")
asia <- world %>% filter(continent == "Asia")
# Converte i dati dei punti in un oggetto sf
merged_data_sf <- st_as_sf(merged_data_clean, coords = c("longitude", "latitude"), crs = st_crs(asia))
# Filtro i punti che sono dentro il continente africano
merged_data_filtered <- st_intersection(merged_data_sf, asia)
# Estraggog le coordinate dalla geometria
merged_data_filtered <- merged_data_filtered %>%
mutate(longitude = st_coordinates(geometry)[, 1],
latitude = st_coordinates(geometry)[, 2])
st_crs(faglie) <- 4326  # Imposta il CRS di 'faglie'
st_crs(asia) <- 4326    # Imposta il CRS di 'asia'
faglie_in_asia <- st_intersection(faglie, asia)
# Carica le librerie necessarie
df_year <- terremoti %>%
mutate(time = ymd_hms(time, tz = "UTC"),
year = floor_date(time, unit = "year"),
mag_bin = cut(mag,
breaks = seq(floor(min(mag, na.rm = TRUE)),
ceiling(max(mag, na.rm = TRUE)),
by = 0.5),
include.lowest = TRUE,
right = FALSE)) %>%
group_by(year, mag_bin) %>%
summarise(count = n(), .groups = "drop")
# Creazione del grafico ad area
ggplot(df_year, aes(x = year, y = count, fill = mag_bin)) +
geom_area(color = "black", size = 0.2) +
scale_y_log10() +
labs(title = "Terremoti per Intervallo di Magnitudo nel Tempo",
subtitle = "Aggregazione annuale con step di 0.5 nella magnitudo",
x = "Anno",
y = "Numero di Terremoti (scala log.)",
fill = "Magnitudo (intervallo)") +
theme_minimal()
DS3_filtered <-terremoti %>%
filter(depth < 300) %>%  # Escludiamo solo outlier estremi
mutate(mag_group = cut(mag, breaks = seq(5, 9, by = 0.5), include.lowest = TRUE))
# Rimuovi le fasce di magnitudo che non contengono dati
DS3_filtered <- DS3_filtered %>%
filter(!is.na(mag_group))
# Crea il grafico
library(ggsci)
ggplot(DS3_filtered, aes(x = mag_group, y = depth, fill = mag_group)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16) +
scale_fill_jco() +  # Usa la palette "jco"
labs(title = "Distribuzione della profondità per fasce di magnitudo",
x = "Fasce di Magnitudo",
y = "Profondità (km)",
fill="Mag.Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
##seleziono le variabili per l'analisi
df_corr= terremoti%>%
dplyr::select(depth, mag, nst, gap, dmin, rms, horizontalError, depthError,
magError, magNst)
#### seleziono le variabili da pulire da NA
df_corr_clean <- df_corr %>%
drop_na(depth, mag, nst, gap, dmin, rms, horizontalError,
depthError, magError, magNst)
#calcolo la matrice di correlazione
df_f=cor(df_corr_clean)
ggcorrplot(df_f,
hc.order = TRUE,
type = "lower",
lab = TRUE)
##seleziono le variabili per l'analisi
df_corr= terremoti%>%
dplyr::select(depth, mag, nst, gap, dmin, rms)
#### seleziono le variabili da pulire da NA
df_corr_clean <- df_corr %>%
drop_na(depth, mag, nst, gap, dmin, rms)
my_density <- function(data, mapping, ...){
ggplot(data = data, mapping = mapping) +
geom_density(alpha = 0.5,
fill = "cornflowerblue", ...)
}
my_scatter <- function(data, mapping, ...){
ggplot(data = data, mapping = mapping) +
geom_point(alpha = 0.5,
color = "cornflowerblue") +
geom_smooth(method=lm,
se=FALSE, ...)
}
ggpairs(df_corr_clean,
lower=list(continuous = my_scatter),
diag = list(continuous = my_density)) +
labs(title = "") +
theme_bw()
