mutate(mag_group = cut(mag, breaks = seq(5, 9, by = 0.5),
include.lowest = TRUE)) %>%
filter(!is.na(mag_group)) %>%  # Rimuove fasce di magnitudo senza dati
group_by(mag_group) %>%
filter(n() >= 10) %>%  # Mantiene solo gruppi con almeno 10 osservazioni
ungroup()
# Creiamo il violin plot
custom_colors <- c("#1F77B4", "#FF7F0E", "#2CA02C",
"#D62728", "#9467BD", "#8C564B",
"#E377C2", "#7F7F7F")
ggplot(DS3_filtered, aes(x = mag_group, y = depth, fill = mag_group)) +
geom_violin(scale = "width", alpha = 0.7, color = "black") +  # Bordo nero
scale_fill_manual(values = custom_colors) +  # Usa la palette personalizzata
labs(title = "Distribuzione della profondità per fasce di magnitudo",
x = "Fasce di Magnitudo",
y = "Profondità (km)",
fill="Mag.Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
DS3_filtered <-terremoti %>%
filter(depth < 300) %>%  # Escludiamo solo outlier estremi
mutate(mag_group = cut(mag, breaks = seq(5, 9, by = 0.5),
include.lowest = TRUE))
# Rimuovi le fasce di magnitudo che non contengono dati
DS3_filtered <- DS3_filtered %>%
filter(!is.na(mag_group))
# Crea il grafico
library(ggsci)
ggplot(DS3_filtered, aes(x = mag_group, y = depth, fill = mag_group)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16) +
scale_fill_jco() +  # Usa la palette "jco"
labs(title = "Distribuzione della profondità per fasce di magnitudo",
x = "Fasce di Magnitudo",
y = "Profondità (km)",
fill="Mag.Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
##seleziono le variabili per l'analisi
df_corr= terremoti%>%
dplyr::select(depth, mag, nst, gap, dmin, rms, horizontalError, depthError,
magError, magNst)
#### seleziono le variabili da pulire da NA
df_corr_clean <- df_corr %>%
drop_na(depth, mag, nst, gap, dmin, rms, horizontalError,
depthError, magError, magNst)
#calcolo la matrice di correlazione
df_f=cor(df_corr_clean)
ggcorrplot(df_f,
hc.order = TRUE,
type = "lower",
lab = TRUE)
# seleziono le variabili per l'analisi
df_corr= terremoti%>%
dplyr::select(depth, mag, nst, gap, dmin, rms)
# seleziono le variabili da pulire da NA
df_corr_clean <- df_corr %>%
drop_na(depth, mag, nst, gap, dmin, rms)
my_density <- function(data, mapping, ...){
ggplot(data = data, mapping = mapping) +
geom_density(alpha = 0.5,
fill = "cornflowerblue", ...)
}
my_scatter <- function(data, mapping, ...){
ggplot(data = data, mapping = mapping) +
geom_point(alpha = 0.5,
color = "cornflowerblue") +
geom_smooth(method=lm,
se=FALSE, ...)
}
ggpairs(df_corr_clean,
lower=list(continuous = my_scatter),
diag = list(continuous = my_density)) +
labs(title = "Matrice di correlazione tra le variabili") +
theme_bw()
ggplot(terremoti, aes(x = dmin, y = horizontalError)) +
geom_point(color = "lightblue", alpha = 0.8, size = 2) +
geom_smooth(method = "lm", se = FALSE, aes(color = "Modello Lineare")) +
geom_smooth(se = FALSE, aes(color = "Modello GAM")) +
scale_color_manual(
name = "Modelli",
values = c("Modello Lineare" = "cornflowerblue", "Modello GAM" = "red")
) +
scale_y_continuous(limits = c(0, 20)) +
scale_x_continuous(breaks = seq(0, 23, 5), limits = c(0, 23)) +
theme_minimal() +
labs(
title = "Distanza dalla stazione più vicina vs Errore
sul rilevamento della posizione",
subtitle = "Modello Lineare vs Modello GAM",
x = "Distanza dalla stazione",
y = "Errore posizione"
) +
theme(legend.position = "right")
gg=   terremoti %>%
mutate(Anno=year(as.Date(time)))%>%
group_by(Anno) %>%
summarise(Conteggio= n(), magnitudomedia=mean(mag))
ggplot(gg, aes(x = Anno, y = Conteggio)) +
geom_line(color = "blue") +
theme_minimal()+
labs(title = "Serie Temporale dei Terremoti (Raggruppati per Anno)",
x = "Anno", y = "Numero di Terremoti")
df_year <- terremoti %>%
mutate(time = ymd_hms(time, tz = "UTC"),
year = floor_date(time, unit = "year"),
mag_bin = cut(mag,
breaks = seq(floor(min(mag, na.rm = TRUE)),
ceiling(max(mag, na.rm = TRUE)),
by = 0.5),
include.lowest = TRUE,
right = FALSE)) %>%
group_by(year, mag_bin) %>%
summarise(count = n(), .groups = "drop")
# Creazione del grafico ad area
ggplot(df_year, aes(x = year, y = count, fill = mag_bin)) +
geom_area(color = "black", size = 0.2) +
scale_y_log10() +
labs(title = "Terremoti per Intervallo di Magnitudo nel Tempo",
subtitle = "Aggregazione annuale con step di 0.5 nella magnitudo",
x = "Anno",
y = "Numero di Terremoti (scala log.)",
fill = "Mag. Gruop") +
theme_minimal()
library(sp)
library(rworldmap)
coordinates_continent = function(points)
{
countriesSP <- getMap(resolution='high')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
indices = over(pointsSP, countriesSP)
indices$REGION
}
coordinates_country = function(points)
{
countriesSP <- getMap(resolution='high')
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
indices = over(pointsSP, countriesSP)
indices$ADMIN
}
terremoti2 = terremoti
terremoti2$continent = coordinates_continent(data.frame(
as.integer(terremoti$longitude),
as.integer(terremoti$latitude)))
terremoti2$continent = recode(
terremoti2$continent,
"South America and the Caribbean"="South America")
terremoti2$country = coordinates_country(data.frame(
as.integer(terremoti$longitude),
as.integer(terremoti$latitude)))
terremoti2 = filter(terremoti2,
type=="earthquake" &
continent!="<NA>" &
continent!="Antarctica")
data_piechart = terremoti2 %>% count(continent) %>%
arrange(desc(continent)) %>%
mutate(perc = round(n/sum(n)*100, 2),
ypos_l = cumsum(perc)-0.5*perc,
perc_l = paste0(round(n/sum(n)*100, 2),"%"))
ggplot(data_piechart, aes(x="", y=perc, fill=continent)) +
geom_bar(stat="identity", width=1, color="black") +
geom_text(aes(y=ypos_l, label=perc_l), color="black", size=3.5) +
coord_polar("y", start=0, direction=-1) +
theme_void() +
scale_fill_brewer(palette="Set2") +
labs(title="PIE CHART di continente",
fill="Continente")
rm(data_piechart)
cbind(min = tapply(terremoti2$mag, droplevels(terremoti2$continent), min),
max = tapply(terremoti2$mag, droplevels(terremoti2$continent), max),
mean = tapply(terremoti2$mag, droplevels(terremoti2$continent), mean),
median = tapply(terremoti2$mag, droplevels(terremoti2$continent), median),
sd = tapply(terremoti2$mag, droplevels(terremoti2$continent), sd))
library(ggridges)
ridge_1 = ggplot(terremoti2, aes(x=mag, y=continent, fill=continent)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position="none") +
labs(title="RIDGELINE GRAPH",
subtitle="Per continente",
x="Magnitudo",
y="Continente")
data_ridge_2a = terremoti2 %>% filter(continent=="South America")
tab_ridge_2 = data.frame(table(droplevels(data_ridge_2a$country))) %>%
filter(Freq>=30) %>%
rename(country=Var1)
data_ridge_2b = inner_join(data_ridge_2a, tab_ridge_2, by="country")
ridge_2 = ggplot(data_ridge_2b, aes(x=mag, y=country, fill=country)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position="none") +
labs(title="",
subtitle="Per stato del Sudamerica",
x="Magnitudo",
y="Stato")
grid.arrange(ridge_1, ridge_2, nrow=1)
rm(ridge_1, ridge_2, data_ridge_2a, data_ridge_2b, tab_ridge_2)
data_cleveland = terremoti2 %>% group_by(continent) %>%
summarise(max=max(mag))
cleveland_1 = ggplot(data_cleveland, aes(x=max, y=reorder(continent,max))) +
geom_point(color="darkblue", size = 2.5) +
geom_segment(aes(x=min(terremoti2$mag), xend=max,
y=reorder(continent,max),
yend=reorder(continent,max)),
color="lightblue") +
theme_minimal() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank()) +
labs(title="CLEVELAND PLOT di magnitudo massima",
subtitle="Per continente",
x="Magnitudo",
y="")
data_cleveland_2a = terremoti2 %>% filter(continent=="South America")
tab_cleveland_2 = data.frame(table(droplevels(data_cleveland_2a$country))) %>%
filter(Freq>=30) %>% rename(country=Var1)
data_cleveland_2b = inner_join(data_cleveland_2a, tab_cleveland_2,
by="country") %>%
group_by(country) %>% summarise(max=max(mag))
cleveland_2 = ggplot(data_cleveland_2b, aes(x=max, y=reorder(country,max))) +
geom_point(color="darkblue", size = 2.5) +
geom_segment(aes(x=min(terremoti2$mag), xend=max,
y=reorder(country,max),
yend=reorder(country,max)),
color="lightblue") +
theme_minimal() +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank()) +
labs(title="",
subtitle="Per stato del Sudamerica",
x="Magnitudo",
y="")
grid.arrange(cleveland_1, cleveland_2, nrow=1)
rm(data_cleveland, cleveland_1, cleveland_2, data_cleveland_2a,
data_cleveland_2b, tab_cleveland_2)
terremoti_sampled <- terremoti %>%
group_by(type) %>%
filter(!(runif(n()) < 0.85))%>%
filter(type == "earthquake")
ggplot() +
borders("world", colour = "gray50", fill = "lightgray") +
geom_sf(data = faglie, color = "red", size = 1, alpha = 0.7) +
geom_point(data = terremoti_sampled, aes(x = longitude, y = latitude,
color = type,
size = mag), alpha = 0.3) +
scale_color_brewer(palette = "Set2") +
scale_size_continuous(range = c(0.5, 3)) +
labs(title = "Terremoti e Faglie Geologiche",
x = "Longitudine",
y = "Latitudine") +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
legend.position = "right"
)+
guides(color = "none")
terremoti_sampled_2 <- terremoti %>%
filter(type != "earthquake")
ggplot() +
borders("world", colour = "gray50", fill = "lightgray") +
geom_point(data = terremoti_sampled_2, aes(x = longitude,
y = latitude,
color = type,
size = mag),
alpha = 0.6) +
scale_size_continuous(range = c(1, 4)) +
labs(title = "Terremoti non dovuti a faglie",
x = "Longitudine", y = "Latitudine",
color = "Tipo di Terremoto", size = "Magnitudo") +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),
legend.position = "right"
)
frequenza_terremoti <- terremoti %>%
count(type) %>%
mutate(Percentuale = n / sum(n) * 100)
frequenza_terremoti <- frequenza_terremoti %>%
mutate(Percentuale = n / sum(n) * 100) %>%
mutate(type = ifelse(Percentuale < 1, "Altri", as.character(type))) %>%
group_by(type) %>%
summarise(n = sum(n), Percentuale = sum(Percentuale)) %>%
ungroup()
ggplot(data = frequenza_terremoti,
aes(x = reorder(type, Percentuale), y = Percentuale)) +
geom_bar(stat = "identity", fill = "#4CAF50", color = "black", width = 0.7) +
coord_flip() +
labs(title = "Percentuale dei terremoti divisi per tipo",
x = "Tipo di Terremoto",
y = "Percentuale (%)") +
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(hjust = 0.5, size = 18,
face = "bold",
color = "#2C3E50"),
axis.text.x = element_text(size = 12, color = "#2C3E50"),
axis.text.y = element_text(size = 12, color = "#2C3E50"),
axis.title = element_text(size = 14, color = "#2C3E50"),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "gray80"),
plot.margin = margin(10, 20, 10, 30),
) +
geom_text(aes(label = paste0(round(Percentuale, 0), "%")),
hjust = -.15, color = "#2C3E50", size = 3)
frequenza_terremoti_minori <- terremoti %>%
filter(type != "earthquake") %>%
count(type) %>%
mutate(Percentuale = n / sum(n) * 100)
ggplot(data = frequenza_terremoti_minori, aes(x = reorder(type, Percentuale),
y = Percentuale)) +
geom_bar(stat = "identity", fill = "#007fff", color = "black", width = 0.7) +
coord_flip() +
labs(title = "Percentuale dei terremoti per Tipo",
x = "Tipo di Terremoto",
y = "Percentuale (%)") +
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(hjust = 0.5, size = 18, face = "bold",
color = "#2C3E50"),
axis.text.x = element_text(size = 12, color = "#2C3E50"),
axis.text.y = element_text(size = 12, color = "#2C3E50"),
axis.title = element_text(size = 14, color = "#2C3E50"),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.ticks = element_line(color = "gray80"),
plot.margin = margin(10, 20, 10, 20)
) +
geom_text(aes(label = paste0(round(Percentuale, 0), "%")), hjust = -0.15,
color = "#2C3E50", size = 2.6)
usa_state = c("Alabama", "Alaska", "Arizona", "Arkansas",
"California", "Colorado", "Connecticut",
"Delaware", "Florida", "Georgia", "Hawaii",
"Idaho", "Illinois", "Indiana", "Iowa",
"Kansas", "Kentucky", "Louisiana", "Maine",
"Maryland", "Massachusetts", "Michigan",
"Minnesota", "Mississippi", "Missouri", "Montana",
"Nebraska", "Nevada", "New Hampshire",
"New Jersey", "New Mexico", "New York", "North Carolina",
"North Dakota", "Ohio", "Oklahoma",
"Oregon", "Pennsylvania", "Rhode Island", "South Carolina",
"South Dakota", "Tennessee", "Texas", "Utah", "Vermont",
"Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming")
usa_state = tolower(usa_state)
# Ho filtrato anche le parole: region, earthquake, sequence, california-baja
earthquakes <- terremoti %>%
filter(type == "earthquake") %>%
separate(place, into = c("location", "state"), sep = ",", extra = "drop") %>%
mutate(state = trimws(state)) %>%
filter(!is.na(state)) %>%
mutate(state = tolower(state)) %>%
mutate(state = str_replace_all(state,
"region|earthquake|sequence|california-baja",
"")) %>%
mutate(state = str_trim(state)) %>%
mutate(state = case_when(
state %in% usa_state ~ "usa",
TRUE ~ state  # mantiene il valore originale per le altre nazioni
))%>%
count(state) %>%
mutate(Percentuale = n / sum(n) * 100) %>%
arrange(-n)
state_map <- map_data("state")
world_map <- map_data("world")
centroids_state <- state_map %>%
group_by(region) %>%
mutate(region = tolower(region)) %>%
summarise(
latitude = mean(lat),
longitude = mean(long)
)
centroids_world <- world_map %>%
group_by(region) %>%
mutate(region = tolower(region)) %>%
summarise(
latitude = mean(lat),
longitude = mean(long)
)
# Ora uniamo i due dataset
merged_data <- merge(earthquakes, centroids_world, by.x = "state",
by.y = "region", all.x = TRUE)
# Rimuovo i valori NA nelle coordinate
merged_data_clean <- merged_data %>%
filter(!is.na(longitude) & !is.na(latitude)) %>%
arrange(-n)
# ----- Vediamo quali sono gli stati con più terremoti ----
limite = 5
# Funzione per filtrare gli stati a più alta percentuale
filtra_percentuale <- function(dataset, soglia = 3) {
dataset %>%
filter(Percentuale >= soglia)
}
stati_importanti <- filtra_percentuale(merged_data_clean, limite)
ggplot(stati_importanti, aes(x="", y=Percentuale, fill=state)) +
geom_bar(stat="identity", width=1, color="black") +
geom_text(aes(label = paste(str_trunc(str_to_title(state), width = 14,
ellipsis = "..."), "\n",
round(Percentuale, 1), "%")),
position = position_stack(vjust = 0.6), size = 3.8,
color = "black") +
coord_polar("y", start=0, direction=-1) +
theme_void() +
scale_fill_brewer(palette="Set2") +
labs(title="PIE CHART degli Stati",
fill="Stati")
world <- ne_countries(scale = "medium", returnclass = "sf")
asia <- world %>% filter(continent == "Asia")
# Converto i dati dei punti in un oggetto sf
merged_data_sf <- st_as_sf(merged_data_clean,
coords = c("longitude", "latitude"),
crs = st_crs(asia))
# Filtro i punti che sono dentro il continente africano
merged_data_filtered <- st_intersection(merged_data_sf, asia)
# Estraggo le coordinate dalla geometria
merged_data_filtered <- merged_data_filtered %>%
mutate(longitude = st_coordinates(geometry)[, 1],
latitude = st_coordinates(geometry)[, 2])
st_crs(faglie) <- 4326  # Imposta il CRS di 'faglie'
st_crs(asia) <- 4326    # Imposta il CRS di 'asia'
faglie_in_asia <- st_intersection(faglie, asia)
asia_merged <- st_join(asia, merged_data_sf %>% select(state, Percentuale))
ggplot(data = asia_merged) +
geom_sf(aes(fill = Percentuale), color = "gray") +
scale_fill_gradient(low = "yellow", high = "red", na.value = "gray90",
name = "Percentuale") +
geom_point(data = merged_data_filtered, aes(x = longitude,
y = latitude), alpha = 0.6) +
geom_sf(data = faglie_in_asia, color = "violet", size = 1, alpha = 0.3) +
geom_text_repel(data = merged_data_filtered,
aes(x = longitude, y = latitude, label = str_to_title(state)),
size = 2.5, fontface = "bold") +
labs(title = "Mappa dell'Asia", x = "Longitudine",
y = "Latitudine",
fill = "Percentuale",
subtitle = 'La mappa mostra gli stati asiatici con più terremoti a livello globale.') +
guides(fill = guide_colorbar(title = "Perc.",
title.position = "top",
barwidth = 0.8, barheight = 15)) +
theme_minimal(base_size = 16) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
plot.subtitle = element_text(size = 10),
legend.position = "right",
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 12),
)
max_magnitudes <- terremoti %>%
filter(type == "earthquake") %>%
separate(place, into = c("location", "state"), sep = ",",
extra = "drop") %>%
mutate(state = trimws(state)) %>%
filter(!is.na(state)) %>%
mutate(state = tolower(state)) %>%
mutate(state = str_replace_all(
state,
"region|earthquake|sequence|california-baja", "")) %>%
mutate(state = str_trim(state)) %>%
mutate(state = case_when(
state %in% usa_state ~ "usa",
TRUE ~ state
)) %>%
group_by(state) %>%
summarise(Max_Mag = max(mag, na.rm = TRUE))
limite = 7.9
# Funzione per filtrare gli stati a più alta mag
filtra_percentuale <- function(dataset, soglia = 3) {
dataset %>%
filter(Max_Mag >= soglia)
}
max_magnitudes <- filtra_percentuale(max_magnitudes, limite)
ggplot(max_magnitudes,
aes(x=Max_Mag,
y=reorder(state, Max_Mag))) +
geom_point(color="blue",
size = 2) +
geom_segment(aes(x = limite,
xend = Max_Mag,
y = reorder(state, Max_Mag),
yend = reorder(state, Max_Mag)),
color = "lightgrey") +
scale_x_continuous(breaks = seq(limite, 10, by = 0.2)) +
scale_y_discrete(labels = function(x) ifelse(tolower(x) == "usa",
"USA", str_to_title(x))) +
labs (x = "Magnitudo",
y = "",
title = "Terremoti più forti per ogni stato",
subtitle = "Dal 1970 al 2014") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
df_filtered <- terremoti %>%
filter(type != "earthquake") %>%
mutate(time = ymd_hms(time, tz = "UTC"),
year = year(time)) %>%
mutate(year_group = cut(year,
breaks = seq(min(year), max(year) + 5, by = 5),
include.lowest = TRUE,
right = FALSE)) %>%
group_by(type, year_group) %>%
summarise(count = n(), .groups = "drop")
ggplot(df_filtered, aes(x = year_group, fill = type, weight = count)) +
geom_bar(position = "fill") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.margin = margin(0, 50, 0, 0))+
scale_fill_brewer(palette = "Set1") +
scale_y_continuous(labels = scales::percent) +
labs(y = 'Percentuale', x = "Gruppi di Anni",
fill = "Tipologia",
title = "Percentuale per tipologie di terremoti negli anni")
